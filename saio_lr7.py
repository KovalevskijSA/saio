def maxpath(g, s):
    n = len(g)
    d = [None] * n
    d[s] = 0
    w = set([i for i, _ in g[s]])
    istar_minus = [[] for _ in range(n)]
    for i, j in enumerate(g):
        for v, l in j:
            istar_minus[v].append((i, l))
    while len(w) != 0:
        v = -1
        for i in w:
            if all(d[j] is not None for j, _ in istar_minus[i]):
                v = i
                break
        d[v] = max([d[vi] + l for vi, l in istar_minus[v]])
        w.remove(v)
        for i, _ in g[v]:
            w.add(i)
    return d


# def maxpath(g, s):
#     n = len(g)
#     d = [None] * n
#     p = [-1] * n
#     d[s] = 0
#     w = set([i for i, _ in g[s]])
#     istar_minus = [[] for _ in range(n)]
#     for i, j in enumerate(g):
#         for v, l in j:
#             istar_minus[v].append((i, l))
#     while len(w) != 0:
#         v = -1
#         for i in w:
#             if all(d[j] is not None for j, _ in istar_minus[i]):
#                 v = i
#         d[v] = -1
#         for vi, l in istar_minus[v]:
#             if d[vi] + l > d[v]:
#                 d[v] = d[vi] + l
#                 p[v] = vi
#         w.remove(v)
#         for i, _ in g[v]:
#             w.add(i)
#     return d, p


def main():
    # g = [(index, wight), ()...]
    tasks = {
        'task 1': {
            'g': [[(1, 5), (2, 6), (4, 1), (3, 4)], # 0
                  [(2, 4), (3, 3), (4, 2)], # 1
                  [(4, 5), (6, 3)],         # 2
                  [(5, 4), (6, 7), (7, 3)],         # 3
                  [(7, 4)],
                  [(6, 2), (7, 5)], # 5
                  [(7, 1), (4, 2)],
                  []]
        },
        'task 2': {
                'g': [[(1, 3), (2, 4), (4, 3), (3, 5)], # 0
                      [(3, 2)], # 1
                      [(1, 1), (3, 6), (5, 3)],         # 2
                      [(4, 4), (5, 1), (6, 4)],         # 3
                      [(5, 2), (6, 5)],
                      [(6, 1)],
                      []] # 5
        },
        'task 3': {
                    'g': [[(1, 4), (2, 1), (3, 5), (5, 2), (6, 7)], # 0
                          [(2, 1), (3, 5)], # 1
                          [(3, 4), (4, 6), (5, 5)],         # 2
                          [(4, 2)],         # 3
                          [(6, 3), (7, 1)],
                          [(3, 4), (6, 2), (7, 7)],
                          [(7, 6)],
                          []] # 5
        },
        'task 4': {
            'g': [[(1, 3), (2, 4), (3, 6), (4, 2)],  # 0
                  [(3, 5), (4, 1)],  # 1
                  [(1, 3), (3, 2), (5, 6)],  # 2
                  [(4, 4), (5, 7), (6, 2)],  # 3
                  [(5, 3), (6, 7), (7, 1)],
                  [(6, 1), (7, 4)],
                  [(7, 6)],
                  []]  # 5
        },
        'task 5': {
            'g': [[(1, 7), (2, 9), (3, 6), (5, 3)],  # 0
                  [(5, 6)],  # 1
                  [(1, 4), (4, 3), (5, 1), (6, 4)],  # 2
                  [(1, 2), (2, 1), (4, 8)],  # 3
                  [(5, 5), (6, 1)],
                  [(6, 3)],
                  []]  # 5
        },
        'task 6': {
            'g': [[(1, 6), (2, 5), (4, 1), (5, 4)],  # 0
                  [(2, 2), (4, 9), (5, 3)],  # 1
                  [(4, 1), (3, 10), (6, 2), (8, 5)],  # 2
                  [(6, 1), (7, 7), (8, 3)],  # 3
                  [(3, 7), (5, 6), (6, 3)],
                  [(3, 5), (6, 1)],
                  [(7, 8)],
                  [(8, 2)],
                  []]  # 5
        },
        'task 7': {
            'g': [[(1, 7), (3, 4), (4, 4)],  # 0
                  [(2, 2), (3, 5)],  # 1
                  [(3, 6), (5, 1), (7, 7)],  # 2
                  [(4, 7), (5, 4)],  # 3
                  [(5, 9), (6, 3)],
                  [(6, 10), (8, 5)],
                  [(8, 8)],
                  [(8, 3)],
                  []]  # 5
        },
        'task 8': {
            'g': [[(1, 7), (2, 2), (3, 1)],  # 0
                  [(3, 9), (4, 5)],  # 1
                  [(5, 4), (6, 3)],  # 2
                  [(2, 4), (4, 3), (5, 5), (7, 7)],  # 3
                  [(5, 10), (7, 4)],
                  [(6, 7), (8, 4)],
                  [(8, 6)],
                  [(5, 8), (8, 1)],
                  []]  # 5
        }
    }

    for i, j in tasks.items():
        print('-'*20 + i)
        d = maxpath(j['g'], 0)
        print(f'd {d}\n')


if __name__ == '__main__':
    main()